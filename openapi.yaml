openapi: 3.0.3
info:
  title: Speadwear API
  description: ファッションコーディネートアプリケーション Speadwear のAPI仕様
  version: 1.0.0
  contact:
    name: Speadwear Support
    email: support@speadwear.com
servers:
  - url: https://api.speadwear.com/api/v1
    description: Production server
  - url: http://localhost:8080/api/v1
    description: Development server
tags:
  - name: auth
    description: 認証関連のAPI
  - name: users
    description: ユーザー管理API
  - name: items
    description: アイテム管理API
  - name: coordinates
    description: コーディネート管理API
  - name: social
    description: ソーシャル機能API
paths:
  /auth/signup:
    post:
      tags:
        - auth
      summary: ユーザー登録
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 255
                  example: 山田太郎
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 8
                  example: password123
      responses:
        '201':
          description: 登録成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIs...
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
  
  /auth/login:
    post:
      tags:
        - auth
      summary: ログイン
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: ログイン成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /auth/logout:
    post:
      tags:
        - auth
      summary: ログアウト
      security:
        - bearerAuth: []
      responses:
        '200':
          description: ログアウト成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Successfully logged out
  
  /auth/refresh:
    post:
      tags:
        - auth
      summary: トークンリフレッシュ
      security:
        - bearerAuth: []
      responses:
        '200':
          description: リフレッシュ成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /auth/me:
    get:
      tags:
        - auth
      summary: 現在のユーザー情報取得
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetail'
        '401':
          $ref: '#/components/responses/Unauthorized'
  
  /users:
    get:
      tags:
        - users
      summary: ユーザー一覧取得
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: 成功
          headers:
            X-Total-Count:
              schema:
                type: integer
              description: 総件数
            X-Page:
              schema:
                type: integer
              description: 現在のページ
            X-Per-Page:
              schema:
                type: integer
              description: 1ページあたりの件数
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserWithRelation'
  
  /users/{id}:
    get:
      tags:
        - users
      summary: ユーザー詳細取得
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags:
        - users
      summary: プロフィール更新
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                introduction:
                  type: string
                current_password:
                  type: string
                new_password:
                  type: string
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /users/{id}/avatar:
    post:
      tags:
        - users
      summary: アバター画像アップロード
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - avatar
              properties:
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: アップロード成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatar:
                    type: string
                    example: /uploads/avatars/123.jpg
  
  /users/{id}/follow:
    post:
      tags:
        - social
      summary: フォロー
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: フォロー成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Followed successfully
    
    delete:
      tags:
        - social
      summary: フォロー解除
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: フォロー解除成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unfollowed successfully
  
  /users/{id}/followers:
    get:
      tags:
        - social
      summary: フォロワー一覧
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSimple'
  
  /users/{id}/following:
    get:
      tags:
        - social
      summary: フォロー中一覧
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserSimple'
  
  /items:
    get:
      tags:
        - items
      summary: アイテム一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: query
          schema:
            type: integer
        - name: season
          in: query
          schema:
            $ref: '#/components/schemas/Season'
        - name: tpo
          in: query
          schema:
            $ref: '#/components/schemas/TPO'
        - name: color
          in: query
          schema:
            $ref: '#/components/schemas/Color'
        - name: super_item
          in: query
          schema:
            $ref: '#/components/schemas/SuperItem'
        - name: min_rating
          in: query
          schema:
            type: number
            minimum: 1
            maximum: 5
        - name: max_rating
          in: query
          schema:
            type: number
            minimum: 1
            maximum: 5
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
    
    post:
      tags:
        - items
      summary: アイテム作成
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - image
                - super_item
                - season
                - tpo
                - color
                - rating
              properties:
                name:
                  type: string
                image:
                  type: string
                  format: binary
                super_item:
                  $ref: '#/components/schemas/SuperItem'
                season:
                  $ref: '#/components/schemas/Season'
                tpo:
                  $ref: '#/components/schemas/TPO'
                color:
                  $ref: '#/components/schemas/Color'
                content:
                  type: string
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  
  /items/{id}:
    get:
      tags:
        - items
      summary: アイテム詳細取得
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemDetail'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags:
        - items
      summary: アイテム更新
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                image:
                  type: string
                  format: binary
                super_item:
                  $ref: '#/components/schemas/SuperItem'
                season:
                  $ref: '#/components/schemas/Season'
                tpo:
                  $ref: '#/components/schemas/TPO'
                color:
                  $ref: '#/components/schemas/Color'
                content:
                  type: string
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      tags:
        - items
      summary: アイテム削除
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 削除成功
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /coordinates:
    get:
      tags:
        - coordinates
      summary: コーディネート一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: user_id
          in: query
          schema:
            type: integer
        - name: season
          in: query
          schema:
            $ref: '#/components/schemas/Season'
        - name: tpo
          in: query
          schema:
            $ref: '#/components/schemas/TPO'
        - name: min_rating
          in: query
          schema:
            type: number
        - name: max_rating
          in: query
          schema:
            type: number
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  coordinates:
                    type: array
                    items:
                      $ref: '#/components/schemas/CoordinateSummary'
    
    post:
      tags:
        - coordinates
      summary: コーディネート作成
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - si_shoes
                - si_bottoms
                - si_tops
                - season
                - tpo
                - rating
              properties:
                si_shoes:
                  type: integer
                si_bottoms:
                  type: integer
                si_tops:
                  type: integer
                si_outer:
                  type: integer
                season:
                  $ref: '#/components/schemas/Season'
                tpo:
                  $ref: '#/components/schemas/TPO'
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                content:
                  type: string
          multipart/form-data:
            schema:
              type: object
              required:
                - si_shoes
                - si_bottoms
                - si_tops
                - season
                - tpo
                - rating
              properties:
                image:
                  type: string
                  format: binary
                si_shoes:
                  type: integer
                si_bottoms:
                  type: integer
                si_tops:
                  type: integer
                si_outer:
                  type: integer
                season:
                  $ref: '#/components/schemas/Season'
                tpo:
                  $ref: '#/components/schemas/TPO'
                rating:
                  type: integer
                content:
                  type: string
      responses:
        '201':
          description: 作成成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coordinate'
  
  /coordinates/{id}:
    get:
      tags:
        - coordinates
      summary: コーディネート詳細取得
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoordinateDetail'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags:
        - coordinates
      summary: コーディネート更新
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        $ref: '#/paths/~1coordinates/post/requestBody'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coordinate'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      tags:
        - coordinates
      summary: コーディネート削除
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 削除成功
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
  
  /coordinates/timeline:
    get:
      tags:
        - coordinates
      summary: タイムライン取得
      description: フォローしているユーザーのコーディネートを取得
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  coordinates:
                    type: array
                    items:
                      $ref: '#/components/schemas/CoordinateSummary'
  
  /coordinates/{id}/like:
    post:
      tags:
        - coordinates
      summary: いいね
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: いいね成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Liked successfully
    
    delete:
      tags:
        - coordinates
      summary: いいね取り消し
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: いいね取り消し成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Unliked successfully
  
  /comments:
    get:
      tags:
        - social
      summary: コメント一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: coordinate_id
          in: query
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'
    
    post:
      tags:
        - social
      summary: コメント投稿
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - coordinate_id
                - comment
              properties:
                coordinate_id:
                  type: integer
                comment:
                  type: string
      responses:
        '201':
          description: 投稿成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
  
  /comments/{id}:
    put:
      tags:
        - social
      summary: コメント更新
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  comment:
                    type: string
                  updated_at:
                    type: string
                    format: date-time
    
    delete:
      tags:
        - social
      summary: コメント削除
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 削除成功
  
  /notifications:
    get:
      tags:
        - social
      summary: 通知一覧取得
      security:
        - bearerAuth: []
      parameters:
        - name: unread_only
          in: query
          schema:
            type: boolean
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: 成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'
                  unread_count:
                    type: integer

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  
  parameters:
    page:
      name: page
      in: query
      schema:
        type: integer
        minimum: 1
        default: 1
    limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
  
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        avatar:
          type: string
        introduction:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    UserDetail:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            items_count:
              type: integer
            coordinates_count:
              type: integer
            followers_count:
              type: integer
            following_count:
              type: integer
    
    UserWithRelation:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            is_following:
              type: boolean
            is_blocked:
              type: boolean
    
    UserProfile:
      allOf:
        - $ref: '#/components/schemas/UserDetail'
        - type: object
          properties:
            is_following:
              type: boolean
            is_blocked:
              type: boolean
    
    UserSimple:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        avatar:
          type: string
        is_following:
          type: boolean
    
    Item:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        name:
          type: string
        image:
          type: string
        super_item:
          $ref: '#/components/schemas/SuperItem'
        season:
          $ref: '#/components/schemas/Season'
        tpo:
          $ref: '#/components/schemas/TPO'
        color:
          $ref: '#/components/schemas/Color'
        content:
          type: string
        rating:
          type: integer
        created_at:
          type: string
          format: date-time
    
    ItemDetail:
      allOf:
        - $ref: '#/components/schemas/Item'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/UserSimple'
            updated_at:
              type: string
              format: date-time
    
    Coordinate:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        image:
          type: string
        season:
          $ref: '#/components/schemas/Season'
        tpo:
          $ref: '#/components/schemas/TPO'
        rating:
          type: integer
        content:
          type: string
        created_at:
          type: string
          format: date-time
    
    CoordinateSummary:
      allOf:
        - $ref: '#/components/schemas/Coordinate'
        - type: object
          properties:
            user:
              $ref: '#/components/schemas/UserSimple'
            likes_count:
              type: integer
            comments_count:
              type: integer
            is_liked:
              type: boolean
            items:
              type: object
              properties:
                shoes:
                  $ref: '#/components/schemas/ItemSimple'
                bottoms:
                  $ref: '#/components/schemas/ItemSimple'
                tops:
                  $ref: '#/components/schemas/ItemSimple'
                outer:
                  $ref: '#/components/schemas/ItemSimple'
    
    CoordinateDetail:
      allOf:
        - $ref: '#/components/schemas/CoordinateSummary'
        - type: object
          properties:
            updated_at:
              type: string
              format: date-time
    
    ItemSimple:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        image:
          type: string
        super_item:
          $ref: '#/components/schemas/SuperItem'
    
    Comment:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        user:
          $ref: '#/components/schemas/UserSimple'
        coordinate_id:
          type: integer
        comment:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    
    Notification:
      type: object
      properties:
        id:
          type: integer
        sender:
          $ref: '#/components/schemas/UserSimple'
        action:
          $ref: '#/components/schemas/NotificationAction'
        coordinate:
          type: object
          properties:
            id:
              type: integer
            image:
              type: string
        comment:
          type: object
          properties:
            id:
              type: integer
            comment:
              type: string
        is_read:
          type: boolean
        created_at:
          type: string
          format: date-time
    
    Season:
      type: integer
      enum: [1, 2, 3, 4]
      description: |
        * 1 - 春
        * 2 - 夏
        * 3 - 秋
        * 4 - 冬
    
    TPO:
      type: integer
      enum: [1, 2, 3, 4, 5]
      description: |
        * 1 - 仕事
        * 2 - プライベート
        * 3 - スポーツ
        * 4 - デート
        * 5 - リラックス
    
    Color:
      type: integer
      enum: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
      description: |
        * 1 - 白
        * 2 - 黒
        * 3 - グレー
        * 4 - ベージュ
        * 5 - ブラウン
        * 6 - ネイビー
        * 7 - カーキ
        * 8 - 赤
        * 9 - ピンク
        * 10 - オレンジ
        * 11 - イエロー
        * 12 - グリーン
        * 13 - ブルー
    
    SuperItem:
      type: string
      enum: [tops, bottoms, shoes, outer, accessory]
      description: |
        * tops - トップス
        * bottoms - ボトムス
        * shoes - シューズ
        * outer - アウター
        * accessory - アクセサリー
    
    NotificationAction:
      type: string
      enum: [follow, like, comment]
      description: |
        * follow - フォロー
        * like - いいね
        * comment - コメント
    
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
  
  responses:
    BadRequest:
      description: リクエストが不正
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: 認証が必要
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: アクセス権限なし
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    NotFound:
      description: リソースが見つからない
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Conflict:
      description: リソースの競合
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'